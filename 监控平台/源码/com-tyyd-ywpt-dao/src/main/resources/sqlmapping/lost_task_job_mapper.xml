<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tyyd.ywpt.dao.configration.schedule.dataobject.LostTaskJobDomain" >
  <resultMap id="resultMap" type="LostTaskJobDomain" >
    <id column="id" property="id" />
    <result column="monitor_id" property="monitorId" />
    <result column="config_type" property="configType"  />
    <result column="job_id" property="jobId" />
    <result column="job_name" property="jobName"/>
    <result column="job_group" property="jobGroup"/>
    <result column="quartz_conf" property="quartzConf" />
    <result column="poll_unit" property="pollUnit"  />
    <result column="poll_times" property="pollTimes"  />
    <result column="ext_col" property="extCol" />
    <result column="gmt_created" property="gmtCreated"  />
    <result column="gmt_modifed" property="gmtModifed"  />
    <result column="bean_id" property="beanId"/>
    <result column="schedule_class" property="scheduleClass"/>
    <result column="is_regedit_task" property="regeditTaskStatus"/>
    <result column="is_warn_completed" property="warnCompletedStatus"/>
    <result column="last_time" property="lastTime"/>
    <result column="deamon_id" property="deamonId"/>
    
  </resultMap>
  
  
   <insert id="collect_lost_task_job"  >
    INSERT INTO b_lost_task_job(
			deamon_id	,
			monitor_id          , 
			config_type         , 
			job_id              , 
			job_name            , 
			job_group           , 
			quartz_conf         , 
			poll_unit           , 
			poll_times          , 
			ext_col             , 
			gmt_created         , 
			gmt_modifed         , 
			bean_id             , 
			schedule_class      , 
			is_regedit_task     , 
			is_warn_completed   , 
			last_time   )
			
			SELECT 
			t2.id,
			t2.monitor_id          , 
			t2.config_type         , 
			t2.job_id              , 
			t2.job_name            , 
			t2.job_group           , 
			t2.quartz_conf         , 
			t2.poll_unit           , 
			t2.poll_times          , 
			t2.ext_col             , 
			now()         , 
			now()         , 
			t2.bean_id             , 
			t2.schedule_class      , 
			0,
			0,
			t2.last_time 
			FROM (
			SELECT dg.*,
				CASE 
				     WHEN dg.poll_unit = '1' THEN TIMESTAMPDIFF(MINUTE,ifnull(t1.last_time,dg.gmt_created),NOW()) 
				     WHEN dg.poll_unit = '2' THEN TIMESTAMPDIFF(HOUR,ifnull(t1.last_time,dg.gmt_created),NOW()) 
				ELSE -1 END interval_time ,
				t1.last_time
				
					FROM b_daemon_schedule_config dg LEFT JOIN (
			SELECT daemon_type,MAX(gmt_created) last_time FROM `b_task_job_log` GROUP BY daemon_type
			<![CDATA[ 
			) t1 ON dg.id = t1.daemon_type where dg.status='0' ) t2 WHERE (t2.interval_time IS NULL OR t2.interval_time = -1) OR (t2.poll_times * 3) < t2.interval_time
			AND NOT EXISTS(SELECT 1 FROM b_lost_task_job b WHERE b.deamon_id=t2.id AND b.is_regedit_task <> 0)
			]]>
			
  </insert>
  
  
  <select id="get_un_alert_task" resultMap="resultMap">
  	 select id,
  			deamon_id	,
			monitor_id          , 
			config_type         , 
			job_id              , 
			job_name            , 
			job_group           , 
			quartz_conf         , 
			poll_unit           , 
			poll_times          , 
			ext_col             , 
			gmt_created         , 
			gmt_modifed         , 
			bean_id             , 
			schedule_class      , 
			is_regedit_task     , 
			is_warn_completed   , 
			last_time
  	 from b_lost_task_job where is_warn_completed = 0 and is_regedit_task in (0,2) 
  	 order by gmt_created desc limit 20
  </select>
  
  
  <select id="get_un_reg_task" resultMap="resultMap">
  		select id,
  			deamon_id	,
			monitor_id          , 
			config_type         , 
			job_id              , 
			job_name            , 
			job_group           , 
			quartz_conf         , 
			poll_unit           , 
			poll_times          , 
			ext_col             , 
			gmt_created         , 
			gmt_modifed         , 
			bean_id             , 
			schedule_class      , 
			is_regedit_task     , 
			is_warn_completed   , 
			last_time
  	 from b_lost_task_job where is_regedit_task in (0,2) 
  	 order by gmt_created desc limit 20 
  </select>
  
  
  <update id="close_notify" parameterType="java.lang.Long">
  	update b_lost_task_job set is_warn_completed = 1 where id = #{id}
  </update>
  
  
  <update id="close_task_job" parameterType="java.lang.Long">
  	update b_lost_task_job set is_regedit_task = 1 where id = #{id}
  </update>
  
  
  <update id="fail_task_job" parameterType="java.lang.Long">
  	update b_lost_task_job set is_regedit_task = 2 where id = #{id}
  </update>
  
  
</mapper>