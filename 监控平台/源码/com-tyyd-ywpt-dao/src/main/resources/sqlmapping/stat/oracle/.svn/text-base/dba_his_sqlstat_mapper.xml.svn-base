<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tyyd.ywpt.dao.stat.oracle.dataobject.OracleDbaHisSQLStatDomain" >
  <resultMap id="BaseResultMap" type="OracleDbaHisSQLStatDomain" >
    	<result column="quotaValue" property="quotaValue"  />
    	<result column="unixTimeStamp" property="unixTimeStamp" />
    	<result column="snap_id" property="snapId" />
    	<result column="dbid" property="dbId" />
    	<result column="instance_number" property="instanceId" />
    	<result column="sql_id" property="sqlId" />
    	<result column="plan_hash_value" property="planHashValue" />
  </resultMap>
  
  
  <resultMap id="sqlStatListBaseResultMap" type="OracleDbaSqlStatListDomain">
  		<result column="beginTime" property="beginTime"  />
    	<result column="snapId" property="snapId" />
    	<result column="instanceId" property="instanceId" />
    	<result column="hashValue" property="hashValue" />
    	<result column="executions" property="executions" />
    	<result column="bufferGets" property="bufferGets" />
    	<result column="diskReads" property="diskReads" />
    	<result column="cpuTime" property="cpuTime" />
    	<result column="elapsedTime" property="elapsedTime" />
    	<result column="iowait" property="iowait" />
    	<result column="clwait" property="clwait" />
    	<result column="ccwait" property="ccwait" />
    	<result column="dwwait" property="dwwait" />
  </resultMap>
  
  
  
  <select id="list_report_sql_stat" parameterType="java.util.Map" resultMap="BaseResultMap">
  	select snap_id,
  		   unixTimeStamp,
  		   end_INTERVAL_TIME,
  		   quotaValue,
  		   dbid,
		   instance_number,
		   sql_id,
		   plan_hash_value
  	from (
		SELECT 
		  stat.snap_id,
		  stat.dbid,
		  stat.instance_number,
		  stat.sql_id,
		  stat.plan_hash_value,
		  UNIX_TIMESTAMP(MIN(s.end_INTERVAL_TIME))  unixTimeStamp ,
		  MIN(s.end_INTERVAL_TIME) end_INTERVAL_TIME,
		  <if test="statType == 'executes' ">
		  		SUM(stat.EXECUTIONS_DELTA) quotaValue
		  </if>
		  
		  <if test="statType == 'disk_reads_total' ">
		  		SUM(stat.DISK_READS_DELTA) quotaValue
		  </if>
		  
		  <if test="statType == 'disk_reads_seconds' ">
		  		SUM(stat.DISK_READS_DELTA)/SUM(stat.EXECUTIONS_DELTA) quotaValue
		  </if>
		  
		  <if test="statType == 'buffer_gets_total' ">
		  		SUM(stat.BUFFER_GETS_DELTA) quotaValue
		  </if>
		  
		  <if test="statType == 'buffer_gets_seconds' ">
		  		SUM(stat.BUFFER_GETS_DELTA)/SUM(stat.EXECUTIONS_DELTA) quotaValue
		  </if>
		  
		  <if test="statType == 'memory' ">
		  		SUM(stat.SHARABLE_MEM) quotaValue
		  </if>
		  
		  <if test="statType == 'parse_total' ">
		  		SUM(stat.PARSE_CALLS_DELTA) quotaValue
		  </if>
		  
		  <if test="statType == 'parse_seconds' ">
		  		SUM(stat.PARSE_CALLS_DELTA)/SUM(stat.EXECUTIONS_DELTA) quotaValue
		  </if>
		  
		  <if test="statType == 'elapsed_time_total' ">
		  		SUM(stat.ELAPSED_TIME_DELTA)/1000000 quotaValue
		  </if>
		  
		  <if test="statType == 'elapsed_time_seconds' ">
		  		SUM(stat.ELAPSED_TIME_DELTA)/1000000/SUM(stat.EXECUTIONS_DELTA) quotaValue
		  </if>
		  
		FROM
		  dba_hist_snapshot s,
		  dba_hist_sqlstat stat 
		WHERE s.snap_id = stat.snap_id 
		  AND s.dbid = stat.dbid 
		  AND s.instance_number = stat.instance_number 
		  AND s.dbid = #{databaseId} 
		  AND s.instance_number = #{instanceId} 
		  AND stat.sql_id = #{sqlId}
		  AND s.BEGIN_INTERVAL_TIME >= #{beginTime}
		<![CDATA[   AND s.end_INTERVAL_TIME <= #{endTime} ]]>
		GROUP BY snap_id 
		) t3 order by end_INTERVAL_TIME asc 
  </select>
  
  
  
  <select id="list_sql_run_status" parameterType="java.util.Map" resultMap="sqlStatListBaseResultMap">
  
	select 
	 sp.END_INTERVAL_TIME beginTime,
	 s.snap_id snapId,
	 s.INSTANCE_NUMBER instanceId,
	 PLAN_HASH_VALUE hashValue,
	 EXECUTIONS_DELTA executions,
	 round(BUFFER_GETS_DELTA/EXECUTIONS_DELTA) bufferGets,
	 round(DISK_READS_DELTA/EXECUTIONS_DELTA) diskReads,
	 round(CPU_TIME_DELTA/EXECUTIONS_DELTA) cpuTime,
	 round(ELAPSED_TIME_DELTA/EXECUTIONS_DELTA) elapsedTime,
	 round(IOWAIT_DELTA/EXECUTIONS_DELTA) iowait,
	 round(CLWAIT_DELTA/EXECUTIONS_DELTA) clwait,
	 round(CCWAIT_DELTA/EXECUTIONS_DELTA) ccwait,
	 round(DIRECT_WRITES_DELTA/EXECUTIONS_DELTA) dwwait
	from DBA_HIST_SQLSTAT s, dba_hist_snapshot sp
	   where s.snap_id=sp.snap_id
	   and s.instance_number=sp.instance_number
	   AND s.DBID = #{databaseId} and s.instance_number = #{instanceId}
	   and sql_id = #{sqlId} 
	   and sp.END_INTERVAL_TIME >= DATE_ADD(NOW(), INTERVAL -${times} HOUR)
	   and executions_delta>=1
	order by 1
  
  </select>
  
  
</mapper>